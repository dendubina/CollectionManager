@using CollectionManager.WEB.Models.Items
@model CollectionManager.WEB.Models.Collections.CollectionDetailsToShow

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>CollectionDetails</title>
</head>
<body>

<div>
    <h4>CollectionDetailsToShow</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ImageSource)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ImageSource)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Category)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Category)
        </dd>
    </dl>
    
    @if (Model.ItemInCollectionDetails.Any())
    {
        var props = Model.ItemInCollectionDetails.First().CustomFieldValues;
        
        <table class="table table-striped">
            <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(x => nameof(ItemInCollectionDetails.Name))
                </th>
                <th>
                    @*@Html.DisplayNameFor(x => x.ItemInCollectionDetails.)*@
                </th>
            </tr>
            </thead>
        </table>
    }
</div>
<div>
    @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    <a asp-action="Index">Back to List</a>
</div>
</body>
</html>
