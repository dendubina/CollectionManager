@using CollectionsManager.DAL.Constants
@model CollectionsManager.BLL.DTO.Items.ItemToCreate

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>AddItemToCollection</title>
</head>
<body>

<h4>ItemToCreate</h4>
<hr />
<div class="row">
    <div class="col-md-4">

        <form asp-action="AddItemToCollection" id="addItemForm">
            @Html.HiddenFor(x => x.CollectionId)

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control"/>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            @{
                for (int i = 0; i < Model.CustomFieldValuesToCreate.Count; i++)
                {
                    @Html.HiddenFor(x => x.CustomFieldValuesToCreate[i].CustomFieldId)
                    @Html.HiddenFor(x => x.CustomFieldValuesToCreate[i].Type)

                    <div class="form-group">
                        @Html.DisplayFor(x => x.CustomFieldValuesToCreate[i].Name)

                        @switch (Model.CustomFieldValuesToCreate[i].Type)
                        {
                            case CustomPropertyType.DateTime:
                                <input asp-for="@Model.CustomFieldValuesToCreate[i].Value" type="datetime-local" class="form-control"/>break;

                            case CustomPropertyType.Bool:
                                <input asp-for="@Model.CustomFieldValuesToCreate[i].Value" type="checkbox" class="form-check-input"/>break;

                            default:
                                <input asp-for="@Model.CustomFieldValuesToCreate[i].Value" class="form-control"/>break;
                        }
                        <span asp-validation-for="@Model.CustomFieldValuesToCreate[i]" class="text-danger"></span>
                    </div>
                }
            }

            <dl class="row">
                <dt class="col-sm-2">
                    Tags:
                </dt>
                <dd class="col-sm-10">
                    <span id="tagsRow"></span>
                </dd>
            </dl>

            <div class="form-group" id="tagInputBlock">
                <input type="text" id="tagInput" class="form-control" placeholder="Type a tag..."/>
                <button type="button" id="addTagButton" class="btn btn-secondary">Add tag</button>

                <div class="tags-list-block">
                    <ul id="tagsList">
                    </ul>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary"/>
            </div>
        </form>
    </div>
</div>
</body>
</html>
<script>
    {
        const baseUrl = "https://localhost:5001";
        const tagInput = document.getElementById('tagInput');
        const addTagButton = document.getElementById('addTagButton');
        const tagsRow = document.getElementById('tagsRow');
        const addItemForm = document.getElementById('addItemForm');
        const tagsList = document.getElementById('tagsList');
        let addedTags = [];

        addTagButton.onclick = () => {
            const value = tagInput.value;

            if (value && !addedTags.includes(value) && value.length < 50) {
                tagsRow.insertAdjacentHTML('beforeend', value + ", ");
                addItemForm.insertAdjacentHTML('beforeend', `<input type='text' style="display: none;"  name='Tags[${addedTags.length}].name' value='${value}' />`);
                addedTags.push(value);
            }

        };

        tagsList.onclick = (event) => {
            tagsList.style.display = "none";
            tagInput.value = event.target.innerHTML;
        }

        tagInput.onkeyup = async () => {
            tagsList.style.display = "none";
            tagsList.innerHTML = '';

            if (tagInput.value.length > 0) {

                let url = new URL("/Tags/FindTags", baseUrl);
                url.searchParams.append("substring", tagInput.value);

                let response = await fetch(url)
                    .then(resp => resp.json());

                if (response.length > 0) {

                    response.forEach((item) => {
                        let li = `<li>${item}</li>`;
                        tagsList.insertAdjacentHTML('beforeend', li);
                    });

                    tagsList.style.display = "block";

                }
            }
            
        }
    }
</script>